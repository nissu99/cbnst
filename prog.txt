//C PROG FOR ERROR-1
#include <stdio.h>
#include <math.h>

int main() {
    
    float actualValue, estimatedValue;
    float absoluteError, relativeError, percentageError;

    printf("\nPlease input the actual value: ");
    scanf("%f", &actualValue);
    
    printf("Please input the estimated value: ");
    scanf("%f", &estimatedValue);

    absoluteError = fabs(estimatedValue - actualValue);
    relativeError = absoluteError / actualValue;
    percentageError = relativeError * 100;

    printf("\nCalculated Absolute Error: %f\n", absoluteError);
    printf("Calculated Relative Error: %f\n", relativeError);
    printf("Calculated Percentage Error: %f%%\n", percentageError);

    return 0;
}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR ERROR-2
#include <stdio.h>
#include <math.h>

int main() {
    float actualValue;
    float estimatedValues[3];

    printf("\nInput the actual value: ");
    scanf("%f", &actualValue);

    printf("Input the estimated values:\n");
    for (int i = 0; i < 3; i++) {
        scanf("%f", &estimatedValues[i]);
    }

    float minAbsError = fabs(actualValue - estimatedValues[0]);
    printf("\nCalculated Absolute Error for %f = %f\n", estimatedValues[0], minAbsError);
    float closestEstimate = estimatedValues[0];

    for (int i = 1; i < 3; i++) {
        float currentAbsError = fabs(actualValue - estimatedValues[i]);
        printf("Calculated Absolute Error for %f = %f\n", estimatedValues[i], currentAbsError);

        if (currentAbsError < minAbsError) {
            minAbsError = currentAbsError;
            closestEstimate = estimatedValues[i];
        }
    }

    printf("\nClosest approximation to %f is %f.\n", actualValue, closestEstimate);
    
    return 0;
}

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// C PROG FOR ITERATION METHOD
#include <stdio.h>
#include <math.h>

double iterationFunction(double x) {
    return (cos(x) + 1) / 3;
}

int main() {
    double x0, tolerance, x_new;
    int maxIterations, iterations = 0;

    printf("Enter the initial guess (x0): ");
    scanf("%lf", &x0);
    printf("Enter the error tolerance: ");
    scanf("%lf", &tolerance);
    printf("Enter the maximum number of iterations: ");
    scanf("%d", &maxIterations);

    while (iterations < maxIterations) {
        x_new = iterationFunction(x0); 

        printf("Iteration %d: x = %lf\n", iterations + 1, x_new);

        if (fabs(x_new - x0) < tolerance) {
            printf("\nRoot found after %d iterations: %lf\n", iterations + 1, x_new);
            return 0;
        }

        x0 = x_new;
        iterations++;
    }

    printf("\nThe method did not converge within the maximum number of iterations.\n");

    return 0;
}

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// C PROG FOR BISECTION METHOD
#include <stdio.h>
#include <math.h>

float f(float x) {
    return (x * x * x - x - 1);
}

int main() {
    float x1, x2, x, aerr;
    int flag = 0, itr = 0;

    do {
        printf("\nEnter the value of x1: ");
        scanf("%f", &x1);

        printf("Enter the value of x2: ");
        scanf("%f", &x2);

        if ((f(x1) * f(x2)) < 0) {
            flag = 1;
            printf("Root lies between %f and %f\n", x1, x2);
        } else {
            printf("\nWrong interval chosen. Please try again.\n");
        }
    } while (flag != 1);

    // Get allowed error
    printf("Enter the allowed error: ");
    scanf("%f", &aerr);

    // Bisection method loop
    flag = 1;
    do {
        itr++;
        x = (x1 + x2) / 2;

        if (f(x) == 0) {
            flag = 0;
        } else if ((f(x1) * f(x)) < 0) {
            x2 = x;
        } else {
            x1 = x;
        }

        printf("Root after %d iteration(s) is %f and f(%f) = %f\n", itr, x, x, f(x));

        if (fabs(f(x)) <= aerr) {
            flag = 0;
        }
    } while (flag != 0);

    // Final result
    printf("\nAfter %d iteration(s), the root of the equation is %f\n", itr, x);
    
    return 0;
}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR REGULA FALSI
#include <stdio.h>
#include <math.h>

float f(float x) {
    return (cos(x) - x*exp(x));
}

int main() {
    float x1, x2, x, aerr;
    int flag = 0, itr = 0;

    do {
        printf("\nEnter the value of x1: ");
        scanf("%f", &x1);

        printf("Enter the value of x2: ");
        scanf("%f", &x2);

        if ((f(x1) * f(x2)) < 0) {
            flag = 1;
            printf("Root lies between %f and %f\n", x1, x2);
        } else {
            printf("\nWrong interval chosen. Please try again.\n");
        }
    } while (flag != 1);

    // Get allowed error
    printf("Enter the allowed error: ");
    scanf("%f", &aerr);

    // Bisection method loop
    flag = 1;
    do {
        itr++;
        x = (x1*f(x2) - x2*f(x1)) / (f(x2) - f(x1));

        if (f(x) == 0) {
            flag = 0;
        } else if ((f(x1) * f(x)) < 0) {
            x2 = x;
        } else {
            x1 = x;
        }

        printf("Root after %d iteration(s) is %f and f(%f) = %f\n", itr, x, x, f(x));

        if (fabs(f(x)) <= aerr) {
            flag = 0;
        }
    } while (flag != 0);

    // Final result
    printf("\nAfter %d iteration(s), the root of the equation is %f\n", itr, x);

    return 0;
}

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR SECANT METHOD
#include <stdio.h>
#include <math.h>

float f(float x) {
    return (x * x * x - 2 * x - 5);
}

int main() {
    float x, x0 = 0.0, x1 = 0.0, error_precision = 0.0;
    int itr = 0;

    while (1) {
        printf("Enter 'x0' such that f(x0) < 0: ");
        scanf("%f", &x0);
        printf("Enter 'x1' such that f(x1) > 0: ");
        scanf("%f", &x1);

        if (f(x0) > 0 || f(x1) < 0) {
            printf("Invalid intervals, please enter again.\n");
        } else {
            break;
        }
    }


    printf("Enter error precision: ");
    scanf("%f", &error_precision);

    while (1) {

        x = x1 - ((x1 - x0) / (f(x1) - f(x0))) * f(x1);

        printf("Value of root: %f in iteration: %d\n", x, ++itr);

        if (fabs(f(x)) <= error_precision) {
            break;
        }


        x0 = x1;
        x1 = x;
    }

    printf("Root of the equation is: %f\n", x);

    return 0;
}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR NEWTON RAPHSON
#include <stdio.h>
#include <math.h>

// Function to evaluate f(x) = 3x - cos(x) - 1
float f(float x) {
    return (3*x - cos(x) - 1);
}

// Derivative of f(x), f'(x) = 3 + sin(x)
float diff_f(float x) {
    return (3 + sin(x));
}

int main() {
    float x = 0.0, x1 = 0.0;
    int i = 0;

    // Input initial guess
    printf("Enter any random value: ");
    while (1) {
        scanf("%f", &x);
        if (diff_f(x) != 0) break;
        printf("Enter another valid value: ");
    }

    // Input allowed error tolerance
    float allowed_error = 0.0;
    printf("Enter allowed error: ");
    scanf("%f", &allowed_error);

    // Newton-Raphson iteration
    while (1) {
        x1 = x - (f(x) / diff_f(x));
        printf("Iteration %d, root = %f\n", ++i, x1);

        // Break if the error is within the allowed range
        if (fabs(f(x1)) <= allowed_error) break;
        x = x1;  // Update x for the next iteration
    }

    // Print the final root
    printf("Root of the equation: %f\n", x1);
    return 0;
}

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROGRAM FOR GAUSS JORDAN METHOD
#include <stdio.h>
#include<math.h>

int main() {
    int n;
    printf("Enter the order of matrix: ");
    scanf("%d", &n);

    float A[n][n + 1];

    printf("Enter coefficients for x1, x2, ..., x%d and the constant terms:\n", n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= n; j++) {
            scanf("%f", &A[i][j]);
        }
    }

    for (int i = 0; i < n; i++) {
        // Make the diagonal element 1
        float diag = A[i][i];
        if (diag == 0) {
            printf("Unique solution does not exist.\n");
            return -1;
        }
        for (int j = 0; j <= n; j++) {
            A[i][j] /= diag;
        }

        // Make all other elements in column i zero
        for (int j = 0; j < n; j++) {
            if (j != i) {
                float factor = A[j][i];
                for (int k = 0; k <= n; k++) {
                    A[j][k] -= factor * A[i][k];
                }
            }
        }
    }

    // Print the resulting identity matrix with constants
    printf("Reduced Row Echelon Form (RREF):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= n; j++) {
            printf("%.1f\t", A[i][j]);
        }
        printf("\n");
    }

    printf("The solution is:\n");
    for (int i = 0; i < n; i++) {
        printf("x%d = %.0f\n", i + 1, A[i][n]);
    }

    return 0;
}

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR GAUSS ELIMINATION
#include <stdio.h>

void convertToUpperTriangular(float a[][10], int n) {
    int i, j, k, x, y;
    float ratio;

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (j > i) {
                ratio = a[j][i] / a[i][i];
                for (k = 0; k < n + 1; k++) {
                    a[j][k] = a[j][k] - (ratio * a[i][k]);
                }
                // Printing the matrix after intermediate row transformations
                printf("\nIntermediate Forms:\n");
                for (x = 0; x < n; x++) {
                    for (y = 0; y < n + 1; y++) {
                        printf("%f ", a[x][y]);
                    }
                    printf("\n");
                }
            }
        }
    }
}

void applyBackwardSubstitution(float a[][10], float value[], int n) {
    int i, j;
    float sum;
    value[n - 1] = a[n - 1][n] / a[n - 1][n - 1];

    for (i = n - 2; i >= 0; i--) {
        sum = 0;
        for (j = i + 1; j < n; j++) {
            sum = sum + a[i][j] * value[j];
        }
        value[i] = (a[i][n] - sum) / a[i][i];
    }
}

void printValues(float value[], int n) {
    int i;
    printf("\nThe values of the unknowns are:\n");
    for (i = 0; i < n; i++) {
        printf("\nValue[%d] = %f", i, value[i]);
    }
    printf("\n");
}

int main() {
    int i, j, n;

    printf("\nEnter the number of unknowns: ");
    scanf("%d", &n);

    // Assuming a maximum size of 10 for the matrix
    float a[10][10], value[10];

    printf("\nEnter the augmented matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n + 1; j++) {
            scanf("%f", &a[i][j]);
        }
    }

    convertToUpperTriangular(a, n);
    applyBackwardSubstitution(a, value, n);
    printValues(value, n);

    return 0;
}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR GAUSS SIEDAL
#include <stdio.h>
#include <math.h>
#include <stdbool.h>

double findSum(int i, double a[][10], int n) {
    double sum = 0;
    for (int j = 0; j < n; j++) {
        if (i != j)
            sum += a[i][j];  // Summing up the off-diagonal elements
    }
    return sum;
}

bool isMethodApplicable(double a[][10], int n) {
    for (int i = 0; i < n; i++) {
        if (fabs(a[i][i]) <= findSum(i, a, n)) {  // Check for diagonal dominance
            return false;
        }
    }
    return true;
}

void print(int iteration, double values[], int n) {
    printf("Iteration %d: ", iteration);
    for (int i = 0; i < n; i++) {
        printf("value[%d] = %f ", i + 1, values[i]);
    }
    printf("\n");
}

void findValues(double a[][10], double values_old[], int n, double aerr) {
    double values_new[10];
    int it = 0, flag;
    double sum;

    for (int i = 0; i < n; i++) {
        values_new[i] = 0;  // Initialize new values to 0
    }

    while (1) {
        for (int i = 0; i < n; i++) {
            sum = 0;
            for (int j = 0; j < n; j++) {
                if (i != j)
                    sum += a[i][j] * values_new[j];  // Summing values of other variables
            }
            values_new[i] = (a[i][n] - sum) / a[i][i];  // Update current variable
        }

        flag = 1;
        for (int k = 0; k < n; k++) {
            if (fabs(values_old[k] - values_new[k]) >= aerr) {
                flag = 0;  // Continue iterations if error exceeds allowed value
                break;
            }
        }

        print(it, values_new, n);  // Print intermediate results

        if (flag == 1) {
            printf("\nResult after %d iterations:\n", it);
            print(it, values_new, n);  // Final result
            return;
        }

        // Update old values for the next iteration
        for (int k = 0; k < n; k++) {
            values_old[k] = values_new[k];
        }

        it++;
    }
}

int main() {
    int n;
    double aerr;

    printf("Enter the number of unknowns: ");
    scanf("%d", &n);

    double a[10][10];  // Assuming maximum size of the augmented matrix is 10
    double values[10] = {0};  // Initializing values to 0

    printf("Enter the augmented matrix (coefficients and constant terms):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n + 1; j++) {
            scanf("%lf", &a[i][j]);
        }
    }

    if (!isMethodApplicable(a, n)) {
        printf("Gauss-Seidel method cannot be applied.\n");
        return 0;
    }

    printf("Gauss-Seidel method is applicable.\n");
    printf("Enter the allowed error: ");
    scanf("%lf", &aerr);

    findValues(a, values, n, aerr);

    return 0;
}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR NEWTON FORWARD
#include <stdio.h>
#include <math.h>

int main() {
    float A[100][100], x, u, u1, y;
    int i, j, fact, n;

    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Enter values of x:\n");
    for (i = 0; i < n; i++) {
        scanf("%f", &A[i][0]);
    }

    printf("Enter corresponding values of y:\n");
    for (i = 0; i < n; i++) {
        scanf("%f", &A[i][1]);
    }

    printf("Enter value of x for which you want y: ");
    scanf("%f", &x);

    // Find difference table
    for (j = 2; j <= n; j++) {
        for (i = 0; i < n - j + 1; i++) { // Fixed the loop condition
            A[i][j] = A[i + 1][j - 1] - A[i][j - 1]; // Corrected the difference calculation
        }
    }

    printf("DIFFERENCE TABLE IS AS FOLLOWS:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j <=n - i; j++) {
            printf("%f \t", A[i][j]);
        }
        printf("\n"); // Added newline for better formatting
    }
    u=(x-A[0][0])/(A[1][0]-A[0][0]);
    y=A[0][1];
    fact=1;
    u1=u;
    for(i=2;i<=n;i++)
    {
        y=y+(u1*A[0][i])/fact;
        fact=fact*i;
        u1=u1*(u1-(i-1));
    }
    printf("value of x:%f is:%f",x,y);
    return 0;
}

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//C PROG FOR NEWTON BACKWARD
#include <stdio.h>
#include <math.h>

int main() {
    float A[100][100], x, u, u1, y;
    int i, j, fact, n;

    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Enter values of x:\n");
    for (i = 0; i < n; i++) {
        scanf("%f", &A[i][0]);
    }

    printf("Enter corresponding values of y:\n");
    for (i = 0; i < n; i++) {
        scanf("%f", &A[i][1]);
    }

    printf("Enter value of x for which you want y: ");
    scanf("%f", &x);

    // Find difference table
    for (j = 2; j <= n; j++) {
        for (i = 0; i < n - j + 1; i++) { // Fixed the loop condition
            A[i][j] = A[i + 1][j - 1] - A[i][j - 1]; // Corrected the difference calculation
        }
    }

    printf("DIFFERENCE TABLE IS AS FOLLOWS:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j <=n - i; j++) {
            printf("%f \t", A[i][j]);
        }
        printf("\n"); // Added newline for better formatting
    }
    j=2;
    u=(x-A[n-1][0])/(A[1][0]-A[0][0]);
    y=A[n-1][1];
    fact=1;
    u1=u;
    for(i=n-2;i>=0;i--)
    {
        y=y+(u1*A[i][j])/fact;
        fact=fact*j;
        u1=u1*(u1+(j-1));
        j++;
    }
    printf("value of f(%f) :%f",x,y);
    return 0;
}

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::